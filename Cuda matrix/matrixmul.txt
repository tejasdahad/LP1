%%cu
#include <bits/stdc++.h>
#include<fstream>
#include <cstdlib>
#include <cassert>
using namespace std;

__global__ void matrixMul(int *a , int *b , int *result , int N) {
  int col = blockIdx.x * blockDim.x + threadIdx.x;
  int row = blockIdx.y * blockDim.y + threadIdx.y;
  if(row < N && col < N) {
    int tmp = 0;
    for(int i = 0 ; i < N ; i++) {
      tmp += a[row*N + i] * b[i*N + col];
    }
    result[row*N + col] = tmp;
  }
}
void init_array(int *m , int N) {
  for(int i = 0 ; i < N*N ; i++) {
    m[i] = rand() % 100;
  }
}
void verify_solution(int *a , int *b , int *result , int N) {
  int tmp;
  for(int i = 0 ; i < N ; i++) {
    for(int j = 0 ; j < N ; j++) {
      tmp = 0;
      for(int k = 0 ; k < N ; k++) {
        tmp += a[i*N + k] * b[k*N + j];
      }
      assert(tmp == result[i*N + j]);
    }
  }
}
int main() {
  int N = 1 << 5;
  size_t bytes = N * N * sizeof(int);
  int *a , *b , *result;
  cudaMallocManaged(&a , bytes);
  cudaMallocManaged(&b , bytes);
  cudaMallocManaged(&result , bytes);
  ofstream outfile;
  outfile.open("output1.txt" , ios::out);
  init_array(a , N);
  init_array(b , N);
  outfile << "Matrix a : \n";
  for(int i = 0 ; i < N*N ; i++) {
    outfile << a[i] << " ";
  }
  outfile << "\n\nMatrix b : \n";
  for(int i = 0 ; i < N*N ; i++) {
    outfile << b[i] << " ";
  }
  int threads = 16;
  int blocks = (N + threads - 1) / threads;
  dim3 Threads(threads , threads);
  dim3 Blocks(blocks , blocks);
  matrixMul<<<Blocks , Threads>>>(a , b , result , N);
  cudaDeviceSynchronize();
  outfile << "\n\nResult Vector : \n";
  for(int i = 0 ; i < N*N ; i++) {
    outfile << result[i] << " ";
  }
  outfile.close();
  verify_solution(a , b , result , N);
  cout << "Program completed successfully!" << endl;
  return 0;
}